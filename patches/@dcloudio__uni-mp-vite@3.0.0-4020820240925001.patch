diff --git a/dist/env.d.ts b/dist/env.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..4cae5c35c747dc08a824948840cc2fc2524afcc5
--- /dev/null
+++ b/dist/env.d.ts
@@ -0,0 +1,15 @@
+// env.d.ts
+
+declare namespace NodeJS {
+    /** `process.env.[xxx]` 只能赋值字符串 */
+    interface ProcessEnv {
+        UNI_PLATFORM?: string;
+        UNI_INPUT_DIR?: string;
+        UNI_OPT_TRACE?: string;
+    }
+
+    /** 只有在 `process.[xxx]` 才可以赋值复杂对象 */
+    interface Process {
+        UNI_SUBPACKAGES?: any;
+    }
+}
\ No newline at end of file
diff --git a/dist/env.js b/dist/env.js
new file mode 100644
index 0000000000000000000000000000000000000000..021e713a42b0f400939ba7289603ef0bdf57940d
--- /dev/null
+++ b/dist/env.js
@@ -0,0 +1,22 @@
+"use strict";
+var __importDefault = (this && this.__importDefault) || function (mod) {
+    return (mod && mod.__esModule) ? mod : { "default": mod };
+};
+Object.defineProperty(exports, "__esModule", { value: true });
+const path_1 = __importDefault(require("path"));
+const fs_1 = require("fs");
+const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
+const platform = process.env.UNI_PLATFORM;
+const inputDir = process.env.UNI_INPUT_DIR;
+
+// #region 分包优化参数获取
+const manifestJson = (0, uni_cli_shared_1.parseManifestJsonOnce)(inputDir);
+const platformOptions = manifestJson[platform] || {};
+const optimization = platformOptions.optimization || {};
+process.env.UNI_OPT_TRACE = !!optimization.subPackages;
+
+const pagesJsonPath = path_1.default.resolve(inputDir, 'pages.json');
+const jsonStr = fs_1.readFileSync(pagesJsonPath, 'utf8');
+const { appJson } = (0, uni_cli_shared_1.parseMiniProgramPagesJson)(jsonStr, platform, { subpackages: true });
+process.UNI_SUBPACKAGES = appJson.subPackages || {};
+// #endregion
\ No newline at end of file
diff --git a/dist/index.js b/dist/index.js
index f343787fe9d9aa1ac97f15a91078814ce747f9ed..6795d4f25cedc4ca7408cbe530b5ac4aa5c0ca2e 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1,5 +1,7 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
+// 引入一个初始化环境变量的脚本
+require("./env");
 const shared_1 = require("@vue/shared");
 const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
 const plugin_1 = require("./plugin");
diff --git a/dist/plugin/build.js b/dist/plugin/build.js
index 47598739e43a1f8049b54fcd756411b42a5dc0af..17d68149c172e46620bd3c4c786e382eaf2ff21f 100644
--- a/dist/plugin/build.js
+++ b/dist/plugin/build.js
@@ -91,9 +91,87 @@ function isVueJs(id) {
     return id.includes('\0plugin-vue:export-helper');
 }
 const chunkFileNameBlackList = ['main', 'pages.json', 'manifest.json'];
+
+// #region subpackage
+const UNI_SUBPACKAGES = process.UNI_SUBPACKAGES || {};
+const subPkgsInfo = Object.values(UNI_SUBPACKAGES);
+const normalFilter = ({ independent }) => !independent;
+const independentFilter = ({ independent }) => independent;
+const map2Root = ({ root }) => root + '/';
+const subPackageRoots = subPkgsInfo.map(map2Root);
+const normalSubPackageRoots = subPkgsInfo.filter(normalFilter).map(map2Root);
+const independentSubpackageRoots = subPkgsInfo.filter(independentFilter).map(map2Root);
+
+// id处理器：将id中的moduleId转换为相对于inputDir的路径并去除查询参数后缀
+function moduleIdProcessor(id) {
+    let inputDir = (0, uni_cli_shared_1.normalizePath)(process.env.UNI_INPUT_DIR);
+    // 确保inputDir以斜杠结尾
+    if (!inputDir.endsWith('/')) {
+        inputDir += '/';
+    }
+
+    const normalized = (0, uni_cli_shared_1.normalizePath)(id);
+    const name = normalized.split('?')[0];
+    // 从name中剔除inputDir前缀
+    const updatedName = name.replace(inputDir, '');
+
+    return updatedName;
+}
+// 查找模块列表中是否有属于子包的模块
+const findSubPackages = function (importers) {
+    return importers.reduce((pkgs, item) => {
+        const pkgRoot = normalSubPackageRoots.find(root => moduleIdProcessor(item).indexOf(root) === 0);
+        pkgRoot && pkgs.add(pkgRoot);
+        return pkgs;
+    }, new Set())
+}
+// 判断是否有主包(是否被主包引用)
+const hasMainPackage = function (importers) {
+    return importers.some(item => {
+        return !subPackageRoots.some(root => moduleIdProcessor(item).indexOf(root) === 0);
+    })
+}
+// 判断该模块引用的模块是否有跨包引用的组件
+const hasMainPackageComponent = function (moduleInfo, subPackageRoot) {
+    if (moduleInfo.id && moduleInfo.importedIdResolutions) {
+        for (let index = 0; index < moduleInfo.importedIdResolutions.length; index++) {
+            const m = moduleInfo.importedIdResolutions[index];
+            
+            if (m && m.id) {
+                const name = moduleIdProcessor(m.id);
+                // 判断是否为组件
+                if (
+                    name.indexOf('.vue') !== -1 ||
+                    name.indexOf('.nvue') !== -1
+                ) {
+                    // 判断存在跨包引用的情况(该组件的引用路径不包含子包路径，就说明跨包引用了)
+                    if (name.indexOf(subPackageRoot) === -1) {
+                        if (process.env.UNI_OPT_TRACE) {
+                            console.log('move module to main chunk:', moduleInfo.id,
+                                'from', subPackageRoot, 'for component in main package:', name)
+                        }
+
+                        // 独立分包除外
+                        const independentRoot = independentSubpackageRoots.find(root => name.indexOf(root) >= 0)
+                        if (!independentRoot) {
+                            return true
+                        }
+                    }
+                } else {
+                    return hasMainPackageComponent(m, subPackageRoot)
+                }
+            }
+        }
+    }
+    return false;
+}
+// #endregion
+
 function createMoveToVendorChunkFn() {
     const cache = new Map();
     const inputDir = (0, uni_cli_shared_1.normalizePath)(process.env.UNI_INPUT_DIR);
+    const UNI_OPT_TRACE = process.env.UNI_OPT_TRACE === 'true' ? true : false;
+    console.log('分包优化开启状态:', UNI_OPT_TRACE);
     return (id, { getModuleInfo }) => {
         const normalizedId = (0, uni_cli_shared_1.normalizePath)(id);
         const filename = normalizedId.split('?')[0];
@@ -114,6 +192,21 @@ function createMoveToVendorChunkFn() {
                 }
                 return;
             }
+            // ！！！ 以下代码是分包优化的核心逻辑
+            if (UNI_OPT_TRACE) {
+                // 如果这个资源只属于一个子包，并且其调用组件的不存在跨包调用的情况，那么这个模块就会被加入到对应的子包中。
+                const moduleInfo = getModuleInfo(id) || {};
+                const importers = moduleInfo.importers || []; // 依赖当前模块的模块id
+                const matchSubPackages = findSubPackages(importers);
+                if (
+                    matchSubPackages.size === 1 &&
+                    !hasMainPackage(importers) &&
+                    !hasMainPackageComponent(moduleInfo, matchSubPackages.values().next().value)
+                ) {
+                    debugChunk(`${matchSubPackages.values().next().value}common/vendor`, normalizedId);
+                    return `${matchSubPackages.values().next().value}common/vendor`;
+                }
+            }
             // 非项目内的 js 资源，均打包到 vendor
             debugChunk('common/vendor', normalizedId);
             return 'common/vendor';
diff --git a/dist/plugins/usingComponents.js b/dist/plugins/usingComponents.js
index 03a63eed5048b587763ef75f773833c5997e08d1..0881f83f98cb9af5d569c5716e433fc53ed305e9 100644
--- a/dist/plugins/usingComponents.js
+++ b/dist/plugins/usingComponents.js
@@ -7,6 +7,51 @@ exports.dynamicImport = exports.uniUsingComponentsPlugin = void 0;
 const path_1 = __importDefault(require("path"));
 const uni_cli_shared_1 = require("@dcloudio/uni-cli-shared");
 const entry_1 = require("./entry");
+const parser = require('@babel/parser')
+const t = require('@babel/types')
+const babelGenerate = require('@babel/generator').default
+
+function getCode (node) {
+  return babelGenerate(t.cloneNode(node), {
+    compact: 'auto',
+    jsescOption: {
+      quotes: 'single',
+      minimal: true
+    }
+  }).code
+}
+function getBabelParserOptions () {
+    return {
+        sourceType: 'module',
+        plugins: [
+            'optionalChaining',
+            'typescript',
+            ['decorators', {
+                decoratorsBeforeExport: true
+            }],
+            'classProperties'
+        ]
+    }
+}
+function handleObjectExpression(asyncCustomComponents) {
+    const properties = asyncCustomComponents.value.properties
+    let list = ''
+    const componentNames = []
+    properties.forEach(_ => {
+        const name = _.key.value.replace(/\-(\w)/g, function(all, letter){
+        return letter.toUpperCase();
+        })
+        const value = _.value.value
+        const asyncCustomComponentsToImport = `import ${name} from '${'@' + value}';`
+        list += asyncCustomComponentsToImport
+        componentNames.push(name)
+    })
+    return {
+        componentNames,
+        list,
+    }
+}
+
 function uniUsingComponentsPlugin(options = {}) {
     const normalizeComponentName = options.normalizeComponentName || ((name) => name);
     const parseAst = (source, id) => {
@@ -66,7 +111,61 @@ function uniUsingComponentsPlugin(options = {}) {
             if (!uni_cli_shared_1.EXTNAME_VUE.includes(path_1.default.extname(filename))) {
                 return null;
             }
-            const ast = parseAst(source, id);
+            let ast = parseAst(source, id);
+            // 处理 asyncCustomComponents | ！！！异步分包核心逻辑
+            if(source.includes('asyncCustomComponents')) {
+                const constNodes = ast.body.filter(_ => _.type === 'VariableDeclaration' && _.kind === 'const')
+                let properComs = []
+                let asyncCustomComponents = ''
+                let components = ''
+                constNodes.forEach(_ => {
+                    (_.declarations || []).forEach(__ => {
+                        if(__.init.type === 'ObjectExpression') {
+                            properComs = __.init.properties
+                            __.init.properties.forEach(proper => {
+                                if(proper.key.name === 'asyncCustomComponents') {
+                                    asyncCustomComponents = proper
+                                }
+                                if(proper.key.name === 'components') {
+                                    components = proper
+                                }
+                            })
+                        }
+                    })
+                })
+                if(!components) {
+                    const componentsBody = parser.parse('const a = { components: {} }', getBabelParserOptions()).program.body
+                    const componentsNode = componentsBody[0]?.declarations[0]?.init?.properties[0]
+                    properComs.splice(0, 0, componentsNode)
+                    constNodes.forEach(_ => {
+                        (_.declarations || []).forEach(__ => {
+                            if(__.init.type === 'ObjectExpression') {
+                                __.init.properties.forEach(proper => {
+                                    if(proper.key.name === 'components') {
+                                        components = proper
+                                    }
+                                })
+                            }
+                        })
+                    })
+                }
+                const contentObj = {}
+                const {
+                    componentNames,
+                    list,
+                } = handleObjectExpression(asyncCustomComponents)
+
+                const importNodes = parser.parse(list, getBabelParserOptions()).program.body
+                const idx = ast.body.findIndex(_ => _.type === 'ImportDeclaration')
+                ast.body.splice(idx + 1, 0, ...importNodes)
+                const componentsNodes = componentNames.map(_ => {
+                    return parser.parse(_, getBabelParserOptions()).program.body[0].expression
+                })
+                components.value.properties.splice(0, 0, ...componentsNodes)
+
+                source = getCode(ast)
+                ast = parseAst(source, id);
+            }
             const descriptor = await (0, uni_cli_shared_1.parseMainDescriptor)(filename, ast, resolve);
             (0, uni_cli_shared_1.updateMiniProgramComponentsByMainFilename)(filename, inputDir, normalizeComponentName);
             return (0, uni_cli_shared_1.transformDynamicImports)(source, descriptor.imports, dynamicImportOptions);
